{"version":3,"sources":["packages/UI/pages/MdToHtml.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["md","localStorage","getItem","useStyles","makeStyles","theme","createStyles","common","marginTop","spacing","width","MdToHtml","classes","React","useState","markdown","setMarkdown","html_string","replace","createHtmlStringFromMarkdown","preview_string","createPreviewStringFromHtmlString","TextField","id","className","label","multiline","rows","variant","value","onChange","e","target","setItem","disabled","navigator","clipboard","Button","onClick","str","writeText","alert","dangerouslySetInnerHTML","__html","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAIMA,EAAKC,aAAaC,QAAQ,MAE1BC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,OAAQ,CACJC,UAAWH,EAAMI,QAAQ,GACzBC,MAAO,YA+FJC,MA1Ff,WACI,IAAMC,EAAUT,IADA,EAEgBU,IAAMC,SAASd,GAAU,IAFzC,mBAETe,EAFS,KAECC,EAFD,KAiDVC,EApB+B,SAACF,GAClC,OAAOA,EACFG,QAAQ,eAAgB,+BACxBA,QAAQ,cAAe,+BACvBA,QAAQ,2BAA4B,mDACpCA,QAAQ,aAAc,oEACtBA,QAAQ,kBAAmB,sDAC3BA,QAAQ,4BAA6B,uBACrCA,QAAQ,cAAe,aACvBA,QAAQ,qBAAsB,qCAWnBC,CAA6BJ,GAC3CK,EAToC,SAACH,GACvC,OAAOA,EACFC,QAAQ,MAAO,QACfA,QAAQ,YAAa,SACrBA,QAAQ,YAAa,SACrBA,QAAQ,aAAc,UAIRG,CAAkCJ,GACzD,OACI,6BACI,6BACI,kBAACK,EAAA,EAAD,CACIC,GAAG,gBACHC,UAAWZ,EAAQL,OACnBkB,MAAM,WACNC,WAAS,EACTC,KAAK,KACLC,QAAQ,WACRC,MAAOd,EACPe,SA1DS,SAACC,GACtBf,EAAYe,EAAEC,OAAOH,OACrB5B,aAAagC,QAAQ,KAAMF,EAAEC,OAAOH,UA0D5B,kBAACP,EAAA,EAAD,CACIC,GAAG,kBACHC,UAAWZ,EAAQL,OACnBkB,MAAM,OACNC,WAAS,EACTC,KAAK,KACLC,QAAQ,WACRC,MAAOZ,EACPiB,UAAQ,KAMfC,UAAUC,WACP,kBAACC,EAAA,EAAD,CAAQd,GAAG,OAAOe,QAAS,kBAtEjBC,EAsEoCtB,OArElDkB,UAAUC,UACVD,UAAUC,UAAUI,UAAUD,GAE9BE,MAAM,oFAJO,IAACF,IAsEV,kBAEJ,yBAAKf,UAAW,yBACZ,uCACA,6BACA,0BAAMkB,wBAAyB,CAAEC,OAAQvB,QCvF1CwB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66ef3e5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst md = localStorage.getItem('md');\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        common: {\r\n            marginTop: theme.spacing(1),\r\n            width: \"50%\",\r\n        },\r\n    }),\r\n);\r\n\r\nfunction MdToHtml() {\r\n    const classes = useStyles();\r\n    const [markdown, setMarkdown] = React.useState(md ? md : \"\");\r\n\r\n    const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMarkdown(e.target.value);\r\n        localStorage.setItem('md', e.target.value);\r\n    };\r\n\r\n    const copyFromHtml = (str: string) => {\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(str);\r\n        } else {\r\n            alert(\"Async Clipboard APIに対応していません。\")\r\n        }\r\n    };\r\n\r\n    const pasteToMarkdown = () => {\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.readText()\r\n                .then(function (text) {\r\n                    setMarkdown(text);\r\n                    localStorage.setItem('md', text);\r\n                });\r\n        } else {\r\n            alert(\"Async Clipboard APIに対応していません。\")\r\n        }\r\n    };\r\n\r\n    const createHtmlStringFromMarkdown = (markdown: string) => {\r\n        return markdown\r\n            .replace(/^### (.*)$/gm, '<h3 class=\"style4a\">$1</h3>')\r\n            .replace(/^## (.*)$/gm, '<h2 class=\"style3a\">$1</h2>')\r\n            .replace(/```([^\\n]*)\\n([^`]*)```/g, '<pre class=\"lang:default decode:true \">$2</pre>')\r\n            .replace(/`([^`]+)`/g, '<span class=\"lang:default decode:true  crayon-inline \">$1</span>')\r\n            .replace(/__((?!__).+)__/g, '<span style=\"background-color: #ffff99;\">$1</span>')\r\n            .replace(/\\[([^[\\]]*)]\\(([^()]*)\\)/g, '<a href=\"$2\">$1</a>')\r\n            .replace(/^\\* (.*)$/gm, '● $1')\r\n            .replace(/^[\\s\\t]+\\* (.*)$/gm, '&nbsp;&nbsp;&nbsp;&nbsp;○ $1')\r\n    }\r\n\r\n    const createPreviewStringFromHtmlString = (html_string: string) => {\r\n        return html_string\r\n            .replace(/\\n/g, '<br>')\r\n            .replace('</h3><br>', '</h3>')\r\n            .replace('</h2><br>', '</h2>')\r\n            .replace('</pre><br>', '</pre>')\r\n    }\r\n\r\n    const html_string = createHtmlStringFromMarkdown(markdown);\r\n    const preview_string = createPreviewStringFromHtmlString(html_string);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField\r\n                    id=\"md-text-field\"\r\n                    className={classes.common}\r\n                    label=\"Markdown\"\r\n                    multiline\r\n                    rows=\"10\"\r\n                    variant=\"outlined\"\r\n                    value={markdown}\r\n                    onChange={handleTextChange}\r\n                />\r\n                <TextField\r\n                    id=\"html-text-field\"\r\n                    className={classes.common}\r\n                    label=\"Html\"\r\n                    multiline\r\n                    rows=\"10\"\r\n                    variant=\"outlined\"\r\n                    value={html_string}\r\n                    disabled\r\n                />\r\n            </div>\r\n            {/* {navigator.clipboard &&\r\n                <Button id=\"paste\" onClick={() => pasteToMarkdown()}>paste to markdown</Button>\r\n            } */}\r\n            {navigator.clipboard &&\r\n                <Button id=\"copy\" onClick={() => copyFromHtml(html_string)}>copy from html</Button>\r\n            }\r\n            <div className={\"preview p-entry__body\"}>\r\n                <h1>Preview</h1>\r\n                <hr />\r\n                <span dangerouslySetInnerHTML={{ __html: preview_string }} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MdToHtml;","import React from 'react';\nimport './App.scss'\nimport MdToHtml from './packages/UI/pages/MdToHtml';\n\nfunction App() {\n  return (\n    <div>\n      <MdToHtml />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}